#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'pushare'
rescue LoadError => ex
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  puts ex.inspect
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Pushare::VERSION

desc 'Debug'
switch [:d,:debug]

desc 'config'
default_value 'pushare.yml'
arg_name 'Configuration file'
flag [:c,:config]

desc 'id'
arg_name 'Agent id'
flag [:i,:id]

desc 'server'
arg_name ''
command :server do |c|
  c.action do |global_options,options,args|
    server = Pushare::Server.new(@config)

    server.bind(:data,:onData) do |data,chan,event|
      server.onData(data,chan,event)
    end

    server.run
  end
end


desc 'client'
arg_name ''
command :client do |c|
  c.action do |global_options,options,args|

    client = Pushare::Client.new(@config)

    client.bind(:control,:onKey) do |data,chan,event|
      client.onKey(data,chan,event)
    end

    client.bind(:control,:onExit) do |data,chan,event|
      client.onExit(data,chan,event)
    end

    client.bind(:control,:onCfg) do |data,chan,event|
      client.onCfg(data,chan,event)
      # pp client.cfg
      puts client.cfg.to_yaml
    end

    client.run
  end
end



pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  begin
    @config = YAML.load(ERB.new(File.read(global[:config])).result)
  rescue Exception => e
    STDERR.puts "pre #{e.message}"
  end

  raise ':pushare not found' if not @config.has_key? :pushare
  @config[:pushare][:id] = global[:id] || command.name.to_s
  {:args=> args, :global=> global, :options=> options}.each do |k,v|
    @config[:pushare][k] = v
    puts "#{k.to_s}: #{v.inspect}"
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  puts exception.backtrace
  true
end

exit run(ARGV)

#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'pushare'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Pushare::VERSION

desc 'Debug'
switch [:d,:debug]

desc 'Test'
switch [:t,:test]

desc 'config'
default_value 'pushare.yml'
arg_name 'The name of the argument'
flag [:c,:config]

desc 'server'
arg_name ''
command :server do |c|
  c.action do |global_options,options,args|
    puts "Global:  #{global_options.inspect}"
    puts "Options: #{options.inspect}"
    puts "Args:    #{args.inspect}"

    @config[:pushare][:args] = args
    @config[:pushare][:global_options] = global_options
    @config[:pushare][:options] = options

    Pusher.app_id = @config[:pushare][:pusher][:app_id]
    Pusher.key = @config[:pushare][:pusher][:key]
    Pusher.secret = @config[:pushare][:pusher][:secret]
    PusherClient.logger = Logger.new(STDOUT)

    server = Pushare::Server.new(@config)

    # events
    _chan,_event = server.guff(:data,:onData)
    server.socket[_chan].bind(_event) do |data|
      server.onData(_chan,_event,data)
    end

    # issue new key
    server.trKey

    # key loop

    # main loop
    server.connect
  end
end


desc 'client'
arg_name ''
command :client do |c|
  c.action do |global_options,options,args|
    puts "Global:  #{global_options.inspect}"
    puts "Options: #{options.inspect}"
    puts "Args:    #{args.inspect}"

    @config[:pushare][:args] = args
    @config[:pushare][:global_options] = global_options
    @config[:pushare][:options] = options

    Pusher.app_id = @config[:pushare][:pusher][:app_id]
    Pusher.key = @config[:pushare][:pusher][:key]
    Pusher.secret = @config[:pushare][:pusher][:secret]
    PusherClient.logger = Logger.new(STDOUT)   

    client = Pushare::Client.new(@config)

    case args[0]
    when "stat"
      client.cfg[:pushare][:threads][:data][:trData].each do |task,opts|
        client.send(task.to_sym,opts)
      end
      exit(1)
    end

    # events
    _chan,_event = client.guff(:control,:onKey)
    client.socket[_chan].bind(_event) do |data|
      client.onKey(_chan,_event,data)
    end

    # data loop
    client.data_loop
   
    # main loop
    client.connect
  end
end



pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  # true
  begin
    @config = YAML.load(ERB.new(File.read(global[:config])).result)
  rescue Exception => e
    STDERR.puts "pre #{e.message}"
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  puts exception.backtrace
  # binding.pry
  true
end

exit run(ARGV)
